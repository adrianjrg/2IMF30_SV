% 1. When a pressedButton(b) is detected, the appropriate requestAccess(d) is sent. % we cannot use it


% 2. The unlockDoor(d) action will be executed if and only if requestAccess(d) was sent first.


% 3. The unlockDoor(d) action will be executed if getPressure(ps1, b) and getPressure(ps2, b) where ps1, ps2 are the pressure sensors on both sides of door d.


% 4.The setPressure(airL, pres) actions will be executed if and only if requestAccess(d) was sent first.


% 5. (personDetected(main, true) implies tetheredConnected(true)) must be true to execute setPressure(main, depressurized).
[true*].personDetected(main, true).[(!personDetected(main, false))*].[tetheredConnected(true)].[(!personDetected(main, false) && !tetheredConnected(false))*].[setPressure(main, depressurized)]

% 6. personDetected(backup, false) must be true to execute setPressure(backup, depressurize). (WEIRD DEADLOCK)
%[true*. personDetected(backup, false)]<(!personDetected(backup, true))*. setPressure(backup, unpressurized)>true
[true*. personDetected(backup, true)]<!personDetected(backup, false)*.setPressure(backup, unpressurized)>false

nu X(p:Bool=false).(
    [personDetected(backup, true)]X(true) &&
    [personDetected(backup, false)]X(false) &&
    [setPressure(backup, unpressurized)]val(!p) &&
    <true>true
)

% 7. If spacecraftDocked(b) is received then execute updateDashboard(docked, b). (TRUE)
forall b: Bool.
    [true*.  spacecraftDocked(b)]<!spacecraftDocked(!b)* .updateDashboard(docked, b)>true

% 8. If personDetected({main, backup}, b) is received then at some point execute updateDashboard(inUse, b).
%forall a1, a2:Airlock, b1, b2:Bool.
%    [true*.personDetected(a1, true)] mu X. nu Y.([!updateDashboard(inUse, true)]X && [tetherConnected(b1) || spacecraftDocked(b2)]Y && <true>true)

% # Weaker version, allow livelocks 
% true* needs to exclude personDetected
forall a1, a2:Airlock.
    [true*.personDetected(a1, true).!updateDashboard(inUse, true)]<true*.updateDashboard(inUse, true)>true &&
    [true*.personDetected(a1, false).(!personDetected(a1, true))*.personDetected(a2, false)]<true*.updateDashboard(inUse, true)>val(a1 != a2)

% 9. If spacecraftDocked(true), then pressedButton(bDashboard) can be executed.
    [true*.spacecraftDocked(true)]<!spacecraftDocked(false)* . buttonPressed(bDashboard)>true

% 10. setPressure(main, pres) can only be executed when doorState(outer, Locked) and doorState(middle, Locked). setPressure(backup, pres) can only be executed when doorState(middle, Locked) and doorState(inner, Locked).
forall pres:Pressure.
    nu X(ds1, ds2: DoorStatus).(
        []
    )

% 11. If doorState(outer, NoReply), then updateDashboard(alarm, true). (TRUE)
[true*. doorState(outer, noreply)] <!(doorState(outer, lock) || doorState(outer, unlock))* .updateDashboard(alarm, true)>true

% 12. If doorState(outer, NoReply), then eventually doorState(middle, unlock) will follow.
[true*. doorState(outer, noreply)] <!(doorState(outer, lock) || doorState(outer, unlock))* .doorState(middle, unlock)>true

% 12.5 If doorState(outer, noreply), then setPressure(main, pres) should not be called.
forall pres:Pressure.
    [true*.doorState(outer, noreply)] nu X.([!setPressure(main, pres)]X && [setPressure(main, pres)]false &&<true>true)

% 13. If buttonPressed(b1) is detected, eventually buttonPressed(b2) can be executed


% 14. Only when at least one adjecent door is unlocked personDetected(airlock, b) can change to personDetected(airlock, !b)
forall b:Bool.
    nu X(lockL:DoorStatus=lock,lockR:DoorStatus=lock).(
        [doorState(middle,lock)]X(lock, lockR) &&
        [doorState(middle,unlock)]X(unlock, lockR) &&
        [doorState(inner,lock)]X(lockL, lock) &&
        [doorState(inner,unlock)]X(lockL, unlock) &&
        [personDetected(backup, b)]val(is_unlock(lockL) || is_unlock(lockR)) &&
        <true>true) &&
    nu X(lockL:DoorStatus=lock,lockR:DoorStatus=lock).(
        [doorState(outer,lock)]X(lock, lockR) &&
        [doorState(outer,unlock)]X(unlock, lockR) &&
        [doorState(middle,lock)]X(lockL, lock) &&
        [doorState(middle,unlock)]X(lockL, unlock) &&
        [personDetected(main, b)]val(is_unlock(lockL) || is_unlock(lockR)) &&
        <true>true)
        
    nu X(out:DoorStatus=lock,mid:DoorStatus=lock,inn:DoorStatus=lock).(
        [doorState(outer, lock)]X(lock, mid, inn) &&
        [doorState(outer, unlock)]X(unlock, mid, inn) &&
        [doorState(middle, lock)]X(out, lock, inn) &&
        [doorState(middle, unlock)]X(out, unlock, inn) &&
        [doorState(inner, lock)]X(out, mid, lock) &&
        [doorState(inner, unlock)]X(out, mid, unlock) &&
        [personDetected(backup, b)]val(is_unlock())
    )

% 15. tetherConnected(true) is not possible if personDetected(main, false)


%forall n: Name, p: PhoneNumber . forall b: PhoneBook .
%  [true* . addPhone(n,p) .
%     !(delPhone(n) || exists q: PhoneNumber . changePhone(n, q))* .
%     findPhone(n) .
%     !(delPhone(n) || exists q: PhoneNumber . changePhone(n, q))*]
%     [getPhoneBook(b)] val(b(n) == p)

%        mu X(n:Nat=0) . (val(n <  (N - 1) + (N - 2)) && <!all_done> X(n+1))
%             || (val(n == (N - 1) + (N - 2)) && <all_done> true)