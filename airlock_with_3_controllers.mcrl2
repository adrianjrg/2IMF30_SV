sort Door = struct outer ? is_outer | middle ? is_middle | inner ? is_inner;
    DoorStatus = struct lock | unlock ? is_unlock | noreply;
    DashboardStatus = struct inUse | alarm | docked;
    Airlock = struct main ?is_main | backup ?is_backup;
    Button = struct bOuter | bMiddleMain | bMiddleBack | bInnerBack | bInnerStation | bDashboard;
    Pressure = struct unpressurized ?is_unpressurized | pressurized ?is_pressurized;
    Environment = struct space ?is_space | mainAirlock ?is_mainAirlock | backupAirlock ?is_backupAirlock | station ?is_station;
    ControllerMode = struct processing | ready;


% External actions
act setPressure: Airlock # Pressure;
    doorState: Door # DoorStatus;
    unlockDoor: Door;
    tetherConnected: Bool;
    spacecraftDocked: Bool;
    personDetected: Airlock # Bool;
    updateDashboard: DashboardStatus # Bool;
    buttonPressed: Button;


% NOT SAFE FOR WORK
map buttonToDoor : Button -> Door;
eqn buttonToDoor(bOuter) = outer;
eqn buttonToDoor(bMiddleMain) = middle;
eqn buttonToDoor(bMiddleBack) = middle;
eqn buttonToDoor(bInnerBack) = inner;
eqn buttonToDoor(bInnerStation) = inner;
eqn buttonToDoor(bDashboard) = outer;

map getLeftEnv : Door -> Environment;
eqn getLeftEnv(outer) = space;
eqn getLeftEnv(middle) = mainAirlock; 
eqn getLeftEnv(inner) = backupAirlock;

map getRightEnv : Door -> Environment;
eqn getRightEnv(outer) = mainAirlock;
eqn getRightEnv(middle) = backupAirlock;
eqn getRightEnv(inner) = station;



% Internal actions
act sendAirlockInUse, receiveAirlockInUse, airlockInUse: Bool; % mapped to personDetector in Safety Controller
    sendDoorState, receiveDoorState, internalDoorState: Door # DoorStatus;
    sendRequestAccess, receiveRequestAccess, internalRequestAccess: Door;
    sendEqualize, receiveEqualize, internalEqualize: Door # DoorStatus;
    sendDockingStatus, receiveDockingStatus, internalDockingStatus: Bool; % Main -> Pressure to update outer environment (! change bool?)
    sendRequestCompleted, receiveRequestCompleted, requestCompleted;
    sendPressureEquilized, receivePressureEqualized, internalPressureEqualized: Door # Bool;
    sendCheckDepressurizeConditions, receiveCheckDepressurizeConditions, checkDepressurizeConditions: Airlock;
    sendConditionsSatisfied, receiveConditionsSatisfied, internalConditionsSatisfied: Airlock # Bool;

% Main controller logic
% sends:updateDashboard/requestAccess/updateSpacecraftDocked
% receives:buttons/docking/inUse/doorState
proc MainController(u:Bool, a:Bool, d:Bool, mode:ControllerMode, currentButton:Button, sent:Bool)
= (mode == ready) -> sum b:Button. (b != bDashboard) -> buttonPressed(b). MainController(mode = processing, currentButton = b, sent = true)
                                                     <> (
                                        (d) -> buttonPressed(bDashboard). MainController(mode = processing, currentButton = b, sent = true)
                                    )
                 <> ((sent) -> sendRequestAccess(buttonToDoor(currentButton)).MainController(sent = false)
                     + receiveRequestCompleted.MainController(mode = ready)
                     )
% + sum cond:Bool. spacecraftDocked(cond). updateDashboard(docked, cond). sendDockingStatus(cond).MainController(u, a, cond, mode, currentButton)
+ sum cond:Bool. receiveAirlockInUse(cond). updateDashboard(inUse, cond). MainController(u = cond)
+ receiveDoorState(outer, noreply). updateDashboard(alarm, true).MainController(a = true) 
+ receiveDoorState(outer, lock). updateDashboard(alarm, false).MainController(a = false)
+ receiveDoorState(outer, unlock). updateDashboard(alarm, false).MainController(a = false)
+ sum cond:Bool. receiveDockingStatus(cond). updateDashboard(docked, cond). MainController(d = cond);

% Door controller
% sends:unlockDoor/sendDoorState/equalize/requestComplete
% receives:doorState/requestAccess/pressureEqualized
proc DoorController(out:DoorStatus, mid:DoorStatus, inn:DoorStatus)
= receiveRequestAccess(outer). (out == lock && mid == lock) -> (sendEqualize(outer, out).DoorController())
+ receiveRequestAccess(outer). (out == noreply) -> (sendRequestCompleted. DoorController())
+ receiveRequestAccess(middle). (out != unlock && mid == lock && inn == lock) -> sendEqualize(middle, out).DoorController()
+ receiveRequestAccess(inner). (mid == lock && inn == lock) -> sendEqualize(inner, out).DoorController()

+ receivePressureEqualized(inner, true). unlockDoor(inner).sendRequestCompleted.DoorController()
+ receivePressureEqualized(middle, true). unlockDoor(middle).sendRequestCompleted.DoorController()
+ receivePressureEqualized(outer, true). unlockDoor(outer).sendRequestCompleted.DoorController(out = unlock)

+ sum d:Door. receivePressureEqualized(d, false). sendRequestCompleted. DoorController()
% Door status from doors
+ (out != noreply) -> doorState(outer, noreply).sendDoorState(outer, noreply).sendRequestCompleted. DoorController(out = noreply)

+ (inn == unlock) -> doorState(inner, lock).DoorController(inn = lock)
+ (mid == unlock) -> doorState(middle, lock).DoorController(mid = lock)
+ (out == unlock) -> doorState(outer, lock). DoorController(out = lock);

%sends:setPressure, sendCheckDepressurizedConditions,sendPressureEquilized   
%receive: receiveConditionsSatisfied, receiveEquilize
proc PressureController(pO:Pressure, pM:Pressure, pB:Pressure, pS:Pressure, dr:Door, dockingChanges:Bool, currentlyDocked:Bool) =
% = receiveDockingStatus(true).PressureController(pressurized, pM, pB, pS, dr)
% + receiveDockingStatus(false).PressureController(unpressurized, pM, pB, pS, dr)
sum d:Door. (
    %default
    (receiveEqualize(d, lock) + receiveEqualize(d, unlock)). (
        (getLeftEnv(d) == getRightEnv(d)) -> sendPressureEquilized(d, true). PressureController(dr = d, dockingChanges = false)
        %from backup into station (always pressurize backup)
        + (is_backupAirlock(getLeftEnv(d)) && is_station(getRightEnv(d))) -> setPressure(backup, pressurized). PressureController(pB = pressurized, dr = d, dockingChanges = false)
        %from docked spaceship into main (always pressurize main)
        + (is_space(getLeftEnv(d)) && pO==pressurized) -> setPressure(main, pressurized). PressureController(pM = pressurized, dr = d, dockingChanges = false)
        %from main into vacuum (depressurize main, after safety check)
        + (is_space(getLeftEnv(d)) && pO==unpressurized) -> sendCheckDepressurizeConditions(main). PressureController(pM = pressurized, dr = d, dockingChanges = false)
        % between backup-main
        + (is_mainAirlock(getLeftEnv(d)) && pM == unpressurized) -> setPressure(main, pressurized) .PressureController(pM = pressurized, dr = d, dockingChanges = false)

    )
    % error case
    + receiveEqualize(d, noreply). (
    (is_mainAirlock(getLeftEnv(d)) && pM == unpressurized) -> sendCheckDepressurizeConditions(backup) .PressureController(pB = unpressurized, dr = d, dockingChanges = false)
    + (is_mainAirlock(getLeftEnv(d)) && pM == pressurized) -> sendPressureEquilized(d, false) .PressureController(pB = unpressurized, dr = d, dockingChanges = false)
    
    + (is_backupAirlock(getLeftEnv(d)) && pB == pressurized) -> sendPressureEquilized(d, true && !dockingChanges) .PressureController(pB = pressurized, dr = d, dockingChanges = false)
    + (is_backupAirlock(getLeftEnv(d)) && pB == unpressurized) -> setPressure(backup, pressurized). sendPressureEquilized(d, true && !dockingChanges) .PressureController(pB = pressurized, dr = d, dockingChanges = false)
    )
)
+ sum airL:Airlock. receiveConditionsSatisfied(airL, true). setPressure(airL, unpressurized). sendPressureEquilized(dr, true && !dockingChanges). PressureController()
+ sum airL:Airlock. receiveConditionsSatisfied(airL, false). sendPressureEquilized(dr, false). PressureController()
+ (!currentlyDocked) -> spacecraftDocked(true). sendDockingStatus(true). PressureController(pO = pressurized, dockingChanges = true, currentlyDocked = true)
+ (currentlyDocked) -> spacecraftDocked(false). sendDockingStatus(false). PressureController(pO = unpressurized, dockingChanges = true, currentlyDocked = false);


%sends: sendInUse, sendConditionsSatisfied  receive: personDetected, tetherConnected
proc SafetyController(perMain:Bool, perBack:Bool, tether:Bool)
= sum airL: Airlock. (
    ( is_main(airL) -> sum b:Bool. (perMain != b) -> personDetected(airL, b). sendAirlockInUse(b || perBack). SafetyController(perMain = b) )
    + ( is_backup(airL) -> sum b:Bool. (perBack != b) -> personDetected(airL, b). sendAirlockInUse(perMain || b). SafetyController(perBack = b) ) 
)
+ sum b:Bool. (tether != b) -> tetherConnected(b). SafetyController(tether = b)
+ receiveCheckDepressurizeConditions(main). sendConditionsSatisfied(main, tether || !perMain).SafetyController()
+ receiveCheckDepressurizeConditions(backup). sendConditionsSatisfied(backup, !perBack).SafetyController();

% Responsible for
% receive: personDetected, tetherConnected, receiveEquilize
% send: setPressure, sendPressureEquilized   
proc PressureAndSafetyController(pO, pM, pB, pS: Pressure, personMain, personBackup:Bool)
= sum d:Door. sum mid,inn:DoorStatus. (
    receiveEqualize(d, noreply, mid, inn).(
        (d == inner) -> 
    )
)


init hide( {airlockInUse, internalDoorState, internalDockingStatus, internalRequestAccess,
            internalEqualize, internalPressureEqualized, checkDepressurizeConditions,
            internalConditionsSatisfied, requestCompleted},
  allow(
    { airlockInUse, internalDoorState, internalRequestAccess, 
      internalEqualize, internalPressureEqualized, 
      checkDepressurizeConditions, internalConditionsSatisfied, internalDockingStatus,
      setPressure, doorState, unlockDoor, tetherConnected, spacecraftDocked, personDetected,
      updateDashboard, buttonPressed, requestCompleted},
    comm(
    { sendAirlockInUse | receiveAirlockInUse -> airlockInUse,
      sendDoorState | receiveDoorState -> internalDoorState,
      sendDockingStatus | receiveDockingStatus -> internalDockingStatus,
      sendRequestAccess | receiveRequestAccess -> internalRequestAccess,
      sendEqualize | receiveEqualize -> internalEqualize,
      sendPressureEquilized | receivePressureEqualized -> internalPressureEqualized,
      sendCheckDepressurizeConditions | receiveCheckDepressurizeConditions -> checkDepressurizeConditions,
      sendConditionsSatisfied | receiveConditionsSatisfied -> internalConditionsSatisfied,
      sendRequestCompleted | receiveRequestCompleted -> requestCompleted
    },
    MainController(false, false, false, ready, bOuter, false) || DoorController(lock, lock, lock) || PressureController(unpressurized, pressurized, pressurized, pressurized, inner, false, false) || SafetyController(false, false, false)
) ) );