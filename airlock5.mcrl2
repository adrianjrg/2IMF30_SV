% CHANGELOG v5b
% - (v5a) Fixed a deadlock where you can request to unlock an already unlocked door and the controller doesn't know what to do, now it sends requestCompleted
% - Fixed Door controller not sending doorState(door, unlock) and sendDoorState(outer, noreply) to main.
% - Allowed button presses only when a person is present in that area (to avoid useless livelocks) - main keeps track
% - Fixed docked - main - backup airlock pressure (not to checkDepressurizeConditions, but to send equalized confirmation)

% - Requirements update:
% - 12: Should be reformulated to something like: If doorState(outer, NoReply), then there is a path where doorState(middle, unlock). This is to avoid paths where you can infinitely livelock or do circles likes clicking a button to unlock a door and then closing it and repeat... Possible solution: [!buttonPressed(bDashboard)*. doorState(outer, noreply)]<!buttonPressed(bDashboard)*. doorState(middle,unlock)>true
% i use !buttonPressed(bDashboard)* instead of true* because if there is no person stuck in the main airlock, there is no need to unlock main, because door can also fail while trying to open for a spacecraft.
% - 11: [true*. doorState(outer, noreply) . !updateDashboard(alarm,true)*]<true*. updateDashboard(alarm,true)>true
% - I didn't try similar actions like 11 yet
% [true*. b. !a*]<true*. a>true 

sort Door = struct outer ? is_outer | middle ? is_middle | inner ? is_inner;
    DoorStatus = struct lock ? is_lock | unlock ? is_unlock | noreply;
    DashboardStatus = struct inUse | alarm | docked;
    Airlock = struct main ?is_main | backup ?is_backup;
    Button = struct bOuter | bMiddleMain | bMiddleBack | bInnerBack | bInnerStation | bDashboard;
    Pressure = struct unpressurized ?is_unpressurized | pressurized ?is_pressurized;
    Environment = struct space ?is_space | mainAirlock ?is_mainAirlock | backupAirlock ?is_backupAirlock | station ?is_station;
    ControllerMode = struct processing | ready;


% External actions
act setPressure: Airlock # Pressure;
    doorState: Door # DoorStatus;
    unlockDoor: Door;
    tetherConnected: Bool;
    spacecraftDocked: Bool;
    personDetected: Airlock # Bool;
    updateDashboard: DashboardStatus # Bool;
    buttonPressed: Button;
    doorFailChance: Bool;


% NOT SAFE FOR WORK
map buttonToDoor : Button -> Door;
eqn buttonToDoor(bOuter) = outer;
eqn buttonToDoor(bMiddleMain) = middle;
eqn buttonToDoor(bMiddleBack) = middle;
eqn buttonToDoor(bInnerBack) = inner;
eqn buttonToDoor(bInnerStation) = inner;
eqn buttonToDoor(bDashboard) = outer;


% Internal actions
act sendAirlockInUse, receiveAirlockInUse, airlockInUse: Airlock # Bool; % mapped to personDetector in Safety Controller
    sendDoorState, receiveDoorState, internalDoorState: Door # DoorStatus;
    sendRequestAccess, receiveRequestAccess, internalRequestAccess: Door;
    sendEqualize, receiveEqualize, internalEqualize: Door # DoorStatus;
    sendDockingStatus, receiveDockingStatus, internalDockingStatus: Bool;
    sendRequestCompleted, receiveRequestCompleted, requestCompleted;
    sendPressureEquilized, receivePressureEqualized, internalPressureEqualized: Door # Bool;
    sendCheckDepressurizeConditions, receiveCheckDepressurizeConditions, checkDepressurizeConditions: Airlock;
    sendConditionsSatisfied, receiveConditionsSatisfied, internalConditionsSatisfied: Airlock # Bool;
    sendDoorChange, receiveDoorChange, internalDoorChange: Door # DoorStatus;
    sendPressureChanged, receivePressureChanged, internalPressureChanged;
    sendDoorACK, receiveDoorACK, internalDoorACK;

%------------------------------------------------------------M A I N _ C O N T R O L L E R------------------------------------------------------------------

% Main controller logic
% sends:updateDashboard/requestAccess/updateSpacecraftDocked
% receives:buttons/docking/inUse/doorState

proc MainController(uM:Bool, uB:Bool, a:Bool, d:Bool, mode:ControllerMode, currentButton:Button, sent:Bool)
= (mode == ready) -> sum b:Button. (b == bInnerStation) -> buttonPressed(b). MainController(mode = processing, currentButton = b, sent = true)
                                                        <> ((uB && (b == bInnerBack || b == bMiddleBack)) -> buttonPressed(b). MainController(mode = processing, currentButton = b, sent = true)
                                                            + (uM && (b == bMiddleMain)) -> buttonPressed(b). MainController(mode = processing, currentButton = b, sent = true)
                                                            + (d && !a && b == bDashboard) -> buttonPressed(bDashboard). MainController(mode = processing, currentButton = b, sent = true)
                                                            + (uM && !a && b == bOuter) -> buttonPressed(bOuter). MainController(mode = processing, currentButton = b, sent = true))
                 <> ((sent) -> sendRequestAccess(buttonToDoor(currentButton)).MainController(sent = false)
                     + receiveRequestCompleted.MainController(mode = ready)
                     )
% + sum cond:Bool. spacecraftDocked(cond). updateDashboard(docked, cond). sendDockingStatus(cond).MainController(u, a, cond, mode, currentButton)
+ sum cond:Bool. receiveAirlockInUse(main, cond). updateDashboard(inUse, (uB || cond)). MainController(uM = cond)
+ sum cond:Bool. receiveAirlockInUse(backup, cond). updateDashboard(inUse, (uM || cond)). MainController(uB = cond)
+ receiveDoorState(outer, noreply). updateDashboard(alarm, true).MainController(a = true) 
+ receiveDoorState(outer, lock). updateDashboard(alarm, false).MainController(a = false)
+ receiveDoorState(outer, unlock). updateDashboard(alarm, false).MainController(a = false)
+ sum cond:Bool. receiveDockingStatus(cond). updateDashboard(docked, cond). MainController(d = cond);

%-----------------------------------------------------------D O O R _ C O N T R O L L E R ------------------------------------------------------------------

% Door controller
% sends:unlockDoor/sendDoorState/equalize/requestComplete
% receives:doorState/requestAccess/pressureEqualized

proc DoorController(out:DoorStatus, mid:DoorStatus, inn:DoorStatus, doorFail: Bool)
= receiveRequestAccess(outer). (out == lock && mid == lock) -> (sendEqualize(outer, out).DoorController())
                            <> sendRequestCompleted. DoorController()
+ receiveRequestAccess(middle). (out != unlock && mid == lock && inn == lock) -> sendEqualize(middle, out).DoorController()
                            <> sendRequestCompleted. DoorController()
+ receiveRequestAccess(inner). (mid == lock && inn == lock) -> sendEqualize(inner, out).DoorController()
                            <> sendRequestCompleted. DoorController()

+ receivePressureEqualized(inner, true). unlockDoor(inner). sendDoorACK . doorState(inner, unlock).sendDoorChange(inner, unlock).sendRequestCompleted.DoorController(inn=unlock)
+ receivePressureEqualized(middle, true). unlockDoor(middle). sendDoorACK . doorState(middle, unlock).sendDoorChange(middle, unlock).sendRequestCompleted.DoorController(mid=unlock)
+ receivePressureEqualized(outer, true). ((!doorFail) -> unlockDoor(outer). sendDoorACK . doorState(outer, unlock).sendDoorChange(outer, unlock).sendRequestCompleted.DoorController(out = unlock)
                                          + (doorFail) -> sendDoorACK . doorState(outer, noreply).sendDoorState(outer, noreply).sendDoorChange(outer, noreply).sendRequestCompleted.DoorController(out = noreply))

+ sum d:Door. receivePressureEqualized(d, false). sendDoorACK . sendRequestCompleted. DoorController()
% Door status from doors                                  vvvvvvvvvvvvvvvvvvvv
%+ (out != noreply) -> doorState(outer, noreply).sendDoorChange(outer, noreply).sendDoorState(outer, noreply).sendRequestCompleted. DoorController(out = noreply) %might still get stuck here

+ (inn == unlock) -> doorState(inner, lock).sendDoorChange(inner, lock).DoorController(inn = lock) %now check closed airlocks
+ (mid == unlock) -> doorState(middle, lock).sendDoorChange(middle, lock).DoorController(mid = lock)
+ (out == unlock) -> ((!doorFail) -> doorState(outer, lock).sendDoorChange(outer, lock). DoorController(out = lock)
                     + (doorFail) -> doorState(outer, noreply).sendDoorState(outer, noreply).sendDoorChange(outer, noreply). DoorController(out = noreply))

%+ sum b: Bool. doorFailChance(b).DoorController(doorFail = b);
+ (!doorFail) -> doorFailChance(true). DoorController(doorFail = true);

%--------------------------------------------------------P R E S S U R E _ C O N T R O L L E R--------------------------------------------------------------

%sends:setPressure, sendCheckDepressurizedConditions,sendPressureEquilized   
%receive: receiveConditionsSatisfied, receiveEquilize

proc PressureController(pO:Pressure, pM:Pressure, pB:Pressure, pS:Pressure, dr:Door, dockingChanges:Bool, currentlyDocked:Bool)
= sum d:Door. (
    %default
    (receiveEqualize(d, lock) + receiveEqualize(d, unlock)). ( 
          (d == outer && (pO == pM)) -> sendPressureEquilized(d, true). receiveDoorACK. PressureController(dr = d, dockingChanges = false)
        + (d == middle && (pM == pB)) -> sendPressureEquilized(d, true). receiveDoorACK. PressureController(dr = d, dockingChanges = false)
        + (d == inner && (pB == pS)) -> sendPressureEquilized(d, true). receiveDoorACK. PressureController(dr = d, dockingChanges = false)
        
        %from backup into station (always pressurize backup)
        + (d == inner && pB == unpressurized) -> setPressure(backup, pressurized). sendPressureEquilized(d, true). receiveDoorACK.  PressureController(pB = pressurized, dr = d, dockingChanges = false)
        %from docked spaceship into main (always pressurize main)
        + (d == outer && pO==pressurized && pM==unpressurized) -> setPressure(main, pressurized). sendPressureEquilized(d, true). receiveDoorACK. PressureController(pM = pressurized, dr = d, dockingChanges = false)
        %from main into vacuum (depressurize main, after safety check)
        + (d == outer && pO==unpressurized && pM==pressurized) -> sendCheckDepressurizeConditions(main). PressureController(pM = pressurized, dr = d, dockingChanges = false)
        % between backup-main+ (!doorFail) -> doorFailChance(true). DoorController(doorFail = true);

        + (d == middle && pM == unpressurized) -> setPressure(main, pressurized). sendPressureEquilized(d, true). receiveDoorACK .PressureController(pM = pressurized, dr = d, dockingChanges = false)
    )
    % error case
    + receiveEqualize(d, noreply). (
        (d == middle && pM == unpressurized) -> sendCheckDepressurizeConditions(backup) .PressureController(pB = unpressurized, dr = d, dockingChanges = false)
        + (d == middle && pM == pressurized) -> sendPressureEquilized(d, true). receiveDoorACK.PressureController(pB = unpressurized, dr = d, dockingChanges = false) %is backup will never be unpressurized if main is pressurized.
        
        + (d == inner && pB == pressurized) -> sendPressureEquilized(d, true && !dockingChanges). receiveDoorACK .PressureController(pB = pressurized, dr = d, dockingChanges = false)
        + (d == inner && pB == unpressurized) -> setPressure(backup, pressurized). sendPressureEquilized(d, true && !dockingChanges). receiveDoorACK .PressureController(pB = pressurized, dr = d, dockingChanges = false)
    )
)
+ sum airL:Airlock. receiveConditionsSatisfied(airL, true). setPressure(airL, unpressurized). sendPressureChanged. sendPressureEquilized(dr, true && !dockingChanges). receiveDoorACK . PressureController()
+ sum airL:Airlock. receiveConditionsSatisfied(airL, false). sendPressureChanged. sendPressureEquilized(dr, false). receiveDoorACK . PressureController()
+ (!currentlyDocked) -> spacecraftDocked(true). sendDockingStatus(true). PressureController(pO = pressurized, dockingChanges = true, currentlyDocked = true)
+ (currentlyDocked) -> spacecraftDocked(false). sendDockingStatus(false). PressureController(pO = unpressurized, dockingChanges = true, currentlyDocked = false);

%---------------------------------------------------------S A F E T Y _ C O N T R O L L E R-----------------------------------------------------------------

%sends: sendInUse, sendConditionsSatisfied  receive: personDetected, tetherConnected

proc SafetyController(perMain:Bool, perBack:Bool, tether:Bool, statOuter, statMiddle, statInner : DoorStatus)
= sum airL: Airlock. (
    ( is_main(airL) -> sum b:Bool. (perMain != b && ( statOuter == unlock || statMiddle == unlock ) ) -> personDetected(airL, b). sendAirlockInUse(main, b). SafetyController(perMain = b) )
    + ( is_backup(airL) -> sum b:Bool. (perBack != b && (statMiddle == unlock || statInner == unlock)) -> personDetected(airL, b). sendAirlockInUse(backup, b). SafetyController(perBack = b) ) 
)
%+ sum b:Bool. (tether != b) -> tetherConnected(b). SafetyController(tether = b)
+ (perMain && statOuter != unlock) -> ( sum b:Bool. (tether != b) -> tetherConnected(b). SafetyController(tether = b) ) %dont untether when open
+ receiveCheckDepressurizeConditions(main). sendConditionsSatisfied(main, tether || !perMain).receivePressureChanged.SafetyController()
+ receiveCheckDepressurizeConditions(backup). sendConditionsSatisfied(backup, !perBack). receivePressureChanged. SafetyController()
+ sum d:DoorStatus. (
    receiveDoorChange(outer, d). SafetyController(statOuter = d)
    + receiveDoorChange(middle, d). SafetyController(statMiddle = d)
    + receiveDoorChange(inner, d). SafetyController(statInner = d)
);

%--------------------------------------------------------------------------------------------------------------------------------------------------------
init
  allow(
    { airlockInUse, internalDoorState, internalRequestAccess, 
      internalEqualize, internalPressureEqualized, internalDoorChange,
      checkDepressurizeConditions, internalConditionsSatisfied, internalDockingStatus,
      setPressure, doorState, unlockDoor, tetherConnected, spacecraftDocked, personDetected,
      updateDashboard, buttonPressed, requestCompleted, doorFailChance, internalPressureChanged, internalDoorACK },
    comm(
    { sendAirlockInUse | receiveAirlockInUse -> airlockInUse,
      sendDoorState | receiveDoorState -> internalDoorState,
      sendDockingStatus | receiveDockingStatus -> internalDockingStatus,
      sendRequestAccess | receiveRequestAccess -> internalRequestAccess,
      sendEqualize | receiveEqualize -> internalEqualize,
      sendPressureEquilized | receivePressureEqualized -> internalPressureEqualized,
      sendCheckDepressurizeConditions | receiveCheckDepressurizeConditions -> checkDepressurizeConditions,
      sendConditionsSatisfied | receiveConditionsSatisfied -> internalConditionsSatisfied,
      sendRequestCompleted | receiveRequestCompleted -> requestCompleted,
      sendDoorChange | receiveDoorChange -> internalDoorChange,
      sendPressureChanged | receivePressureChanged -> internalPressureChanged,
      sendDoorACK | receiveDoorACK -> internalDoorACK
    },
    MainController(false, false, false, false, ready, bOuter, false) || DoorController(lock, lock, lock, false) || PressureController(unpressurized, pressurized, pressurized, pressurized, inner, false, false) || SafetyController(false, false, false, lock, lock, lock)
 ) );
