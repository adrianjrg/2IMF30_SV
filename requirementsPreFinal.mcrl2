% TO FIX: R1, R3, R13 -strenthen
% TO REMOVE:
% ALLOW REPAIR: 14

% R1. Doors will only be unlocked following an appropriate button press.
forall btn:Button. val(btn == bInnerStation || btn == bInnerBack) => 
    [true*.buttonPressed(btn).
     true*.unlockDoor(inner).
     !(buttonPressed(bInnerStation) || buttonPressed(bInnerBack))*.
     unlockDoor(inner)]false &&
forall btn:Button. val(btn == bMiddleMain || btn == bMiddleBack) => 
    [true*.buttonPressed(btn).
     true*.unlockDoor(middle).
     !(buttonPressed(bMiddleMain) || buttonPressed(bMiddleBack))*
     .unlockDoor(middle)]false &&
forall btn:Button. val(btn == bOuter || btn == bDashboard) => 
    [true*.buttonPressed(btn).
     true*.unlockDoor(outer).
     !(buttonPressed(bOuter) || buttonPressed(bDashboard))*.
     unlockDoor(outer)]false



% R2. A door can unlock if and only if both sides have equal pressure.
% pO, pM and pB - represent the pressure outside the spacestation, in the main airlock and inside the backup airlock, respectively.
nu X(pO:Pressure = unpressurized, pM:Pressure = pressurized, pB:Pressure = pressurized). (
    % Keep track of the observational variables.
    [spacecraftDocked(true)]X(pressurized, pM, pB)                  &&
    [spacecraftDocked(false)]X(unpressurized, pM, pB)               &&
    exists p:Pressure. [setPressure(main, p)]X(pO, p, pB)           &&
    exists p:Pressure. [setPressure(backup, p)]X(pO, pM, p)         &&
    % Conditions to satisfy.
    [unlockDoor(outer)]val(pM == pO)            &&                                 
    [unlockDoor(middle)]val(pM == pB)           &&                   
    [unlockDoor(inner)]val(pB == pressurized)   &&                              
    % Every other external action doesn't change anything.
    exists b:Bool, airL:Airlock, p:Pressure. [!((spacecraftDocked(b)) || setPressure(airL, p))]X(pO, pM, pB)
)

% R3. A change in pressure can only occur following a button press.
% forall p:Pressure, airL: Airlock.
%     [!(buttonPressed(bOuter) || buttonPressed(bDashboard) || buttonPressed(bInnerStation) || buttonPressed(bInnerBack) 

% % reqOuter, reqMiddle, reqInner - represent whether an unlock request in currently being processed for the outer, middle and inner door, respectively.
% nu X(reqOuter:Bool=false, reqMiddle:Bool=false, reqInner:Bool=false).(
%     % Keep track of the observational variables.
    forall btn:Button.val(buttonToDoor(btn) == inner)  => [buttonPressed(btn)]X(reqOuter, reqMiddle, true) &&
%     forall btn:Button.val(buttonToDoor(btn) == middle) => [buttonPressed(btn)]X(reqOuter, true, reqInner) &&
%     forall btn:Button.val(buttonToDoor(btn) == outer)  => [buttonPressed(btn)]X(true, reqMiddle, reqInner) &&
    
%     exists d:Door. [unlockDoor(d)]X(false, false, false) &&
%     % Conditions to satisfy.
%     exists p:Pressure. [setPressure(main, p)]val(reqMiddle || reqOuter)       &&
%     exists p:Pressure .[setPressure(backup, p)]val(reqInner || reqMiddle)     &&
%     % Every other external action doesn't change anything.
%     exists btn:Button, d:Door. [!(buttonPressed(btn) || unlockDoor(d))]X(reqOuter, reqMiddle, reqInner)
% )


nu X(request:Bool = false).(
    % Keep track of the observational variables.
    forall btn:Button. [buttonPressed(btn)]X(true) &&
    forall airL:Airlock, p:Pressure. [setPressure(airL, p)]X(false) &&
    forall d: Door. [unlockDoor(d)]X(false) &&
    % Conditions to satisfy.
    forall p:Pressure. [setPressure(main, p)]val(request)       &&
    forall p:Pressure. [setPressure(backup, p)]val(request)     &&
    % Every other external action doesn't change anything.
    exists btn:Button, airL:Airlock, p:Pressure. [!(buttonPressed(btn) || setPressure(airL, p))]X(request)
)


nu X(request:Bool = false).(
    % Keep track of the observational variables.
    forall btn:Button. [buttonPressed(btn)]X(true) &&
    forall airL:Airlock, p:Pressure. [setPressure(airL, p)]X(false) &&
    forall d: Door. [unlockDoor(d)]X(false) &&
    % Conditions to satisfy.
    forall p:Pressure. [setPressure(main, p)]val(request)       &&
    forall p:Pressure. [setPressure(backup, p)]val(request)     &&
    % Every other external action doesn't change anything.
    exists btn:Button, airL:Airlock, p:Pressure. [!(buttonPressed(btn) || setPressure(airL, p))]X(request)
)

%niels
nu X(request:Bool = false).(
    % Keep track of the observational variables.
    forall btn:Button. [buttonPressed(btn)]X(true) &&
    forall airL:Airlock, p:Pressure. [setPressure(airL, p)]X(false) &&
    forall d: Door. [unlockDoor(d)]X(false) &&
    [buttonIgnoredWarning(true)]X(false) &&
    [doorState(outer, noreply)]X(false) &&

    % Conditions to satisfy.
    forall p:Pressure. [setPressure(main, p)]val(request)       &&
    forall p:Pressure. [setPressure(backup, p)]val(request)     &&
    % Every other external action doesn't change anything.
    exists btn:Button, airL:Airlock, p:Pressure. [!(buttonPressed(btn) || setPressure(airL, p) || buttonIgnoredWarning(true))]X(request)
)


forall btn1, btn2:Button, airL:Airlock, p:Pressure. [true*.buttonPressed(btn1).true*.setPressure(airL, p).!(buttonPressed(btn2))*.setPressure(airL, p)]false
forall btn2:Button, airL:Airlock, p:Pressure. [true*.buttonPressed(bOuter).true*.setPressure(airL, p).!(buttonPressed(btn2))*.setPressure(airL, p)]false
forall p:Pressure. [true*.buttonPressed(bInnerStation).!(forall btn:Button.buttonPressed(btn))*.setPressure(main, p).!(forall btn:Button.buttonPressed(btn))*.setPressure(main, p)]false



% R4. The main airlock cannot be depressurized when an untethered person is present in that airlock.
% perMain - represent whether a person is present in the main airlock
% tetherCon - represent whether the tether is connected
nu X(perMain:Bool = false, tetherCon:Bool = false). (
    % Keep track of the observational variables.
    exists b:Bool.[personDetected(main, b)]X(b, tetherCon)       && 
    exists b:Bool.[tetherConnected(b)]X(perMain, b)              &&
    % Condition to satisfy.
    [setPressure(main, unpressurized)]val(!perMain || tetherCon) &&
    % Every other external action doesn't change anything.
    exists b:Bool.[!(personDetected(main, b) || tetherConnected(b))]X(perMain, tetherCon)
)

% R5. The backup airlock cannot depressurize if a person is present.
% perBack - represent whether a person is present in the backup airlock
nu X(perBack:Bool = false). (
    % Keep track of the observational variables.
    exists b:Bool.[personDetected(backup, b)]X(b)       &&
    % Condition to satisfy.
    [setPressure(backup, unpressurized)]val(!perBack)   &&
    % Every other external action doesn't change anything.
    exists b:Bool. [!(personDetected(backup, b))]X(perBack)
)

% R6. If and only if a spacecraft is docked on the docking station, the dashboard will display a ’Docked’ status.
forall b: Bool.
    [true*.  spacecraftDocked(b). !updateDashboard(docked, b)*]<true*. updateDashboard(docked, b)>true
    
% R7. While any person detector detects a person the dashboard will display an ’Air-lock in use’ status.
forall a1, a2:Airlock.
    [true*.personDetected(a1, true).!updateDashboard(inUse, true)*]<true*.updateDashboard(inUse, true)>true &&
    [true*.personDetected(a1, false).(!personDetected(a1, true))*.personDetected(a2, false)]<true*.updateDashboard(inUse, false)>val(a1 != a2)


% R8. An operator can request to open the outer door with a dashboard button if and only if there is a spacecraft docked. ############# CHANGE OR REMOVE?
[true*.updateDashboard(docked, false). !updateDashboard(docked,true)* . buttonPressed(bDashboard)]false

% R9. An airlock will not change pressure unless both adjacent doors are locked.
% dO, dM and dI - represent the statuses of the outer, middle and inner door, respectively.
nu X(dO: DoorStatus = lock, dM: DoorStatus = lock, dI: DoorStatus = lock).(
    % Keep track of the observational variables.
    [unlockDoor(inner)]X(dO, dM, unlock)             &&    
    [unlockDoor(middle)]X(dO, unlock, dI)            &&     
    [unlockDoor(outer)]X(unlock, dM, dI)             && 
    [doorState(inner, lock)]X(dO, dM, lock)          && 
    [doorState(middle, lock)]X(dO, lock, dI)         && 
    [doorState(outer, lock)]X(lock, dM, dI)          && 
    [doorState(outer, noreply)]X(noreply, dM, dI)    && 
    % Conditions to satisfy.
    forall p:Pressure.[setPressure(main, p)](val(dO == lock && dM == lock))      &&     
    forall p:Pressure.[setPressure(backup, p)](val(dM == lock && dI == lock))    &&  
    % Every other external action doesn't change anything.
    exists d:Door. [ !(unlockDoor(d) || doorState(d, lock) || doorState(outer, noreply)) ]X(dO, dM, dI)
)

% R10. If and only if the outer door fails, the dashboard will display an ’Alarm’ status.
[true*. doorState(outer, noreply). !updateDashboard(alarm, true)*]<true*. updateDashboard(alarm, true)>true

% R11. The system can receive external inputs at any time.
[true*]<true>true
[!(tau)*.tau*]<tau*.!(tau)>true % we have places where we can only do tau actions :) aight?

% R12. The tether sensor will not change readings if : no person is present in the main airlock - and the outer door is unlocked.
% perMain - represent whether a person is present in the backup airlock
% dO - represents the status of the outer door
nu X(perMain: Bool = false, dO: DoorStatus = lock) . (
    % Keep track of the observational variables.
    exists b:Bool.[personDetected(main, b)]X(b, dO)    &&  
    [doorState(outer, unlock)]X(perMain, unlock)       && 
    [doorState(outer, noreply)]X(perMain, noreply)     &&    
    [doorState(outer, lock)]X(perMain, lock)           &&    
    % Condition to satisfy.
    forall b:Bool.[tetherConnected(b)]val(perMain == true && dO != unlock)  &&
    % Every other external action doesn't change anything.
    exists b:Bool.[!(personDetected(main, b) || unlockDoor(outer) || doorState(outer, noreply) || doorState(outer, lock)) ]X(perMain, dO)
)

% R13. After a button is pressed, eventually another (some other?) button can always be pressed.
forall b1: Button, b2: Button.
    [true*. buttonPressed(b1). !buttonPressed(b2)*]<true*.buttonPressed(b2)>true

    
% R14. Once the outer door fails, the pressure in the main airlock should not be changed. <<<<<<<< REPHRASE WITH REPAIR
% R14. Once the outer door fails, the pressure in the main airlock should not be changed until the outer door is operational again.
forall p:Pressure.
    [true*. doorState(outer, noreply). !(setPressure(main, p) || doorState(outer, unlock) || doorState(outer, lock))* .setPressure(main, p)]false


